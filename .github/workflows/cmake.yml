name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    #runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of sonarcloud analysis

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install gcc-11 g++-11 python3-dev python3-numpy python3-matplotlib python3-pip lcov libopenmpi-dev libhdf5-mpi-dev ccache libboost-dev libyaml-cpp-dev

    - name: Install fastcov
      run: pip3 install fastcov --user

    - name: Install Sonarscan CLI
      run: ( curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216-linux.zip > sonar-scanner.zip ) && unzip sonar-scanner.zip -d ${{runner.workspace}}
      
    - name: Install Sonarscan Build Wrapper
      run: ( curl https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip > build-wrapper.zip ) && unzip build-wrapper.zip -d ${{runner.workspace}}

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11 -DENABLE_ASAN=OFF

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: ${{runner.workspace}}/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output cmake --build . --config $BUILD_TYPE

    - name: Create test output directory
      run: cmake -E make_directory $GITHUB_WORKSPACE/tests

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ASAN_OPTIONS=abort_on_error=1:fast_unwind_on_malloc=0:detect_leaks=0 UBSAN_OPTIONS=print_stacktrace=1 LSAN_OPTIONS=suppressions=$GITHUB_WORKSPACE/tests/leak_suppress.txt ctest --output-on-failure -C $BUILD_TYPE

    - name: Upload test output
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: ${{github.workspace}}/tests

    #- name: Run code coverage
    #  working-directory: ${{runner.workspace}}/build
    #  run: cmake --build . --config $BUILD_TYPE --target coverage

    - name: SonarCloud Scan
      working-directory: ${{github.workspace}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ${{runner.workspace}}/sonar-scanner-4.5.0.2216-linux/bin/sonar-scanner -Dsonar.cfamily.build-wrapper-output=${{runner.workspace}}/build/bw-output
