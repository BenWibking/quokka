# *****************************************************************
# Problem size and geometry
# *****************************************************************
geometry.prob_lo     =  -3.703e18  -3.703e18  -3.703e18
geometry.prob_hi     =  3.703e18   3.703e18   3.703e18
geometry.is_periodic =  0    0    0

# *****************************************************************
# VERBOSITY
# *****************************************************************
amr.v              = 1       # verbosity in Amr

# *****************************************************************
# Resolution and refinement
# *****************************************************************
amr.n_cell          = 128 128 128
amr.max_level       = 0     # number of levels = max_level + 1
amr.blocking_factor = 16    # grid size must be divisible by this
amr.max_grid_size   = 64    # at least 128 for GPUs
amr.n_error_buf     = 3     # minimum 3 cell buffer around tagged cells
amr.grid_eff        = 0.7   # default

hydro.reconstruction_order = 3  # PPM
cfl = 0.2
max_timesteps = 300
stop_time = 1e16

do_reflux = 1
do_subcycle = 0

ascent_interval = 10
plotfile_interval = 20
checkpoint_interval = 100

perturb.cloud_radius = 3.086e18
perturb.cloud_omega = 2.016008E-14
# in quokka/src/StarCluster, generate with 'python3 perturbation.py --kmin=2 --kmax=64 --size=128 --alpha=2 --f_solenoidal=1.0'
# and put it in quokka/tests/
perturb.filename = "zdrv.hdf5"

derived_vars = log_density

amrex.throw_exception = 0
amrex.signal_handling = 1

primordial_chem.enabled = 1
primordial_chem.temperature = 265

primordial_chem.small_temp = 1.e1
primordial_chem.small_dens = 1.e-60
primordial_chem.max_density_allowed = 3e-6

#ntot Tgas  E H- D- H HE H2 HD D H+ HE+ H2+ D+ HD+ HE++
primordial_chem.primary_species_1 = 1e-4
primordial_chem.primary_species_2 = 1e-4
primordial_chem.primary_species_3 = 1e0
primordial_chem.primary_species_4 = 1e-40
primordial_chem.primary_species_5 = 1e-40
primordial_chem.primary_species_6 = 1e-40
primordial_chem.primary_species_7 = 1e-40
primordial_chem.primary_species_8 = 1e-40
primordial_chem.primary_species_9 = 1e-6
primordial_chem.primary_species_10 = 1e-40
primordial_chem.primary_species_11 = 1e-40
primordial_chem.primary_species_12 = 1e-40
primordial_chem.primary_species_13 = 1e-40
primordial_chem.primary_species_14 = 0.0775e0


# integrator runtime parameters
# are we using primordial chemistry? then we use number densities
integrator.use_number_densities = 1
# we do not want to subtract the internal energy
integrator.subtract_internal_energy = 0
# we do not want to clip species between 0 and 1
integrator.do_species_clip = 0
# minimum positive value of number densities
integrator.SMALL_X_SAFE = 1e-100
integrator.burner_verbose = 0

# do you want to use the jacobian calculated in a previous step?
integrator.use_jacobian_caching = 0
# integration will fail if the number density > X_reject_buffer*atol
integrator.X_reject_buffer = 1e100
# Set which jacobian to use
# 1 = analytic jacobian
# 2 = numerical jacobian
integrator.jacobian = 1

# do you want to normalize abundances within VODE? (you don't!)
integrator.renormalize_abundances = 0
# tolerances
integrator.rtol_spec = 1.0e-4
integrator.atol_spec = 1.0e-4
